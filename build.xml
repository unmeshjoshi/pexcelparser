<?xml version="1.0"?>
<project name="pubmaticpublisheronboarding" xmlns:ivy="antlib:org.apache.ivy.ant" default="package" basedir=".">
    <property environment="env"/>
    <property name="build.root" value="${basedir}"/>
    <property name="java.src.dir" location="src"/>
    <property name="test.src.dir" location="test"/>
    <property name="scala.src.dir" location="src"/>
    <property name="build" location="target/build"/>
    <property name="build.classes" location="${build}/classes"/>
    <property name="test.build.classes" location="${build}/testclasses"/>
    <property name="test.junit.reports" location="${build}/reports"/>
    <property name="dist" location="${build}/dist"/>
    <property name="application.name" value="pubmatic-publisher-onboarding"/>

    <path id="classpath">
        <fileset dir="lib">
            <include name="buildtime/*.jar"/>
            <include name="runtime/*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <fileset dir="lib">
            <include name="test/*.jar"/>
            <include name="compile/*.jar"/>
        </fileset>
        <pathelement location="${build.classes}"/>
        <path refid="classpath"/>
    </path>

    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant">
        <classpath>
            <pathelement location="lib/compile/ivy-2.3.0.jar"/>
        </classpath>
    </taskdef>

    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath>
            <pathelement location="lib/compile/scala-compiler.jar"/>
            <pathelement location="lib/compile/scala-reflect.jar"/>
            <pathelement location="lib/compile/scala-library.jar"/>
        </classpath>
    </taskdef>
    <!-- =================================
          target: resolve
         ================================= -->
    <target name="resolve" description="--> retrieve dependencies with ivy">
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="compile"/>
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="test"/>
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="runtime"/>
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="buildtime"/>
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="sources"/>
    </target>

    <target name="make-build-dir" description="Creates the build directory">
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${test.build.classes}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${test.junit.reports}"/>
        <mkdir dir="lib"/>
        <mkdir dir="lib/runtime"/>
        <mkdir dir="lib/compile"/>
        <mkdir dir="lib/buildtime"/>
        <mkdir dir="lib/test"/>
    </target>

    <target name="compile" depends="make-build-dir, resolve, compile-scala" description="Compiles the source">
        <javac srcdir="${java.src.dir}"
               destdir="${build.classes}"
               classpathref="classpath"
               debug="true"
               />
    </target>

    <target name="clean-ivy-cache" description="Clean ivy cache">
        <ivy:cleancache/>
    </target>


    <target name="compile.test" depends="compile, compile-scala" description="Compiles the test classes">
        <javac srcdir="${test.src.dir}"
               destdir="${test.build.classes}"
               classpathref="test.classpath"
               debug="true">
        </javac>
    </target>

    <target name="clean" description="Deletes all the build directories.">
        <delete dir="${build.classes}"/>
        <delete dir="${test.build.classes}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="test" depends="compile.test" description="run unit tests">
        <junit printsummary="yes" fork="yes" haltonfailure="yes">
            <classpath location="${build.classes}"/>
            <classpath location="${test.build.classes}"/>
            <classpath refid="test.classpath"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="plain" usefile="true"/>
            <formatter type="xml" usefile="true"/>
            <batchtest fork="yes" todir="${test.junit.reports}">
                <fileset dir="${test.build.classes}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <pathconvert property="mf.classpath" pathsep=" ">
        <path refid="classpath"/>
        <mapper>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*.jar" to="lib/*.jar"/>
            </chainedmapper>
        </mapper>
    </pathconvert>

    <target name="package" depends="compile, compile.test, test">
        <jar destfile="${dist}/${application.name}.jar">
            <fileset dir="${build.classes}"/>
            <zipgroupfileset dir="lib/runtime" includes="*.jar"/>

            <manifest>
                <attribute name="Main-Class" value="com.pubmatic.server.PublisherOnboardingServer"/>
                <attribute name="Class-Path" value=""/>
            </manifest>
        </jar>
    </target>
    <target name="deploy" depends="package">
        <delete dir="${tomcat.web.app.dir}/${application.name}"/>
        <copy file="${dist}/${application.name}.war" todir="${tomcat.web.app.dir}"/>
    </target>

    <target name="compile-scala" depends="make-build-dir">
        <scalac srcdir="${scala.src.dir}"
                destdir="${build.classes}"
                classpathref="classpath">
            <include name="**/*.scala"/>
        </scalac>
    </target>
</project>
